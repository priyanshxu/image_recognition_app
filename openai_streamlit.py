# Snowpark for Python Developer Guide: https://docs.snowflake.com/en/developer-guide/snowpark/python/index.html
# Streamlit docs: https://docs.streamlit.io/
# OpenAI: https://openai.com/

import json
import pandas as pd
from snowflake.snowpark.session import Session
import streamlit as st
import base64
import openai
import os
import uuid

# Retrieve OpenAI key from environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

# Streamlit config
st.set_page_config(
    page_title="Image Recognition app in Snowflake",
    layout='wide',
    menu_items={
         'Get Help': 'https://developers.snowflake.com',
         'About': "The source code for this application can be accessed on GitHub https://github.com/Snowflake-Labs/sfguide-snowpark-pytorch-streamlit-openai-image-rec"
     }
)

# Set page title, header and links to docs
st.header("Image Recognition app in Snowflake using Snowpark Python, PyTorch, Streamlit and OpenAI")
st.caption(f"App developed by [Dash](https://twitter.com/iamontheinet)")
st.write("[Resources: [Snowpark for Python Developer Guide](https://docs.snowflake.com/en/developer-guide/snowpark/python/index.html)   |   [Streamlit](https://docs.streamlit.io/)   |   [OpenAI](https://openai.com/)   |   [PyTorch Implementation of MobileNet V3](https://github.com/d-li14/mobilenetv3.pytorch)]")

# Function to create new or get existing Snowpark session
def create_session():
    if "snowpark_session" not in st.session_state:
        session = Session.builder.configs(json.load(open("connection.json"))).create()
        st.session_state['snowpark_session'] = session
    else:
        session = st.session_state['snowpark_session']
    return session

# Call function to create new or get existing Snowpark session to connect to Snowflake
session = create_session()

st.markdown("""---""")

# Add text box for entering text
text_input = st.text_input("Enter description of your favorite animal ðŸ‘‡")
if text_input:
    with st.spinner("Generating an image and prediction both in real-time..."):    

        # Call OpenAI API to generate an image based on user entered text
        response = openai.Image.create(
            prompt=text_input,
            n=1,
            size="512x512",
            response_format="b64_json"
        )

        # Convert image base64 string into hex
        image_bytes = response['data'][0]['b64_json']
        bytes_data_in_hex = base64.b64decode(image_bytes).hex()

        # Generate new image file name
        file_name = 'img_' + str(uuid.uuid4())

        # Decode base64 image data and generate image file that can be used to display on screen 
        decoded_data = base64.b64decode((image_bytes))
        with open(file_name, 'wb') as f:
            f.write(decoded_data)

        # Write image data in Snowflake table
        df = pd.DataFrame({"FILE_NAME": [file_name], "IMAGE_BYTES": [bytes_data_in_hex]})
        session.write_pandas(df, "IMAGES")

        # Call Snowpark User-Defined Function to predict image label
        predicted_label = session.sql(f"SELECT image_recognition_using_bytes(image_bytes) as PREDICTED_LABEL from IMAGES where FILE_NAME = '{file_name}'").to_pandas().iloc[0,0]

        _, col2, col3, _ = st.columns(4, gap='medium')
        with st.container():
            with col2:
                # Display image generated by OpenAI
                st.subheader("Image Generated by OpenAI's DALL-E 2")
                st.image(file_name)
                
            with col3:
                # Display predicted label
                st.subheader("Predicted Label in Snowpark using PyTorch")
                st.code(predicted_label, language='python')

        # Delete locally generated image file
        os.remove(file_name)
